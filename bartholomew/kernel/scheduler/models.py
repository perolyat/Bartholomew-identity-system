"""
Data models for scheduler persistence.

All timestamps are stored as UTC epoch seconds (integers) for consistency.
"""

from dataclasses import dataclass
from typing import Optional, Dict, Any, List
import json


@dataclass
class Tick:
    """Record of a single drive execution."""
    id: Optional[int] = None
    task_id: str = ""
    started_ts: int = 0  # UTC epoch seconds
    finished_ts: Optional[int] = None  # UTC epoch seconds
    success: int = 0  # 0 or 1
    idempotency_key: str = ""
    result_meta: Optional[str] = None  # JSON string

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        return {
            "id": self.id,
            "task_id": self.task_id,
            "started_ts": self.started_ts,
            "finished_ts": self.finished_ts,
            "success": self.success,
            "idempotency_key": self.idempotency_key,
            "result_meta": json.loads(self.result_meta)
            if self.result_meta else None,
        }


@dataclass
class Nudge:
    """
    Proactive suggestion emitted by a drive.
    
    Reuses existing nudges table schema from MemoryStore.
    """
    kind: str
    message: str
    actions: List[Dict[str, Any]]
    reason: str
    created_ts: int  # UTC epoch seconds

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        return {
            "kind": self.kind,
            "message": self.message,
            "actions": self.actions,
            "reason": self.reason,
            "created_ts": self.created_ts,
        }


@dataclass
class Reflection:
    """
    Reflective content generated by a drive.
    
    Reuses existing reflections table schema from MemoryStore.
    """
    kind: str
    content: str
    meta: Optional[Dict[str, Any]]
    ts: int  # UTC epoch seconds
    pinned: bool = False

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        return {
            "kind": self.kind,
            "content": self.content,
            "meta": self.meta,
            "ts": self.ts,
            "pinned": self.pinned,
        }
